//get_nextval 先i++ j++再给nextval[i]赋值
void get_nextval(string str,vector<int> &nextval){
    nextval[0] = -1;
    int i = 0;
    int j = -1;
    while(i<nextval.size()-1){
        if(j==-1||str[i]==str[j]){
            i++;
            j++;
            if(str[i]==str[j]) {
                nextval[i] = nextval[j];
            }
            else nextval[i] = j;
            
        }
        else{
            j = nextval[j];
        }
    }
}
int compare(string mstr,string sstr,vector<int> &nextval,int pos){
    int i = 0;
    int j = 0;
    while(i<mstr.size()){
        if(i==pos) i = pos+sstr.size()+1;
        while(i<mstr.size()&&mstr[i]==sstr[j]){
            
            i++;
            j++;
            if(j==sstr.size()){
                return i-1;
            }
        }
        if(nextval[j]==-1){
            i++;
            j = 0;
        }
        else j = nextval[j];

    }
    return -1;
    
}
class Solution {
public:
    vector<string> stringMatching(vector<string>& words) {
        int n = words.size();
        vector<string> ans;
        vector<int> indexes(n,0);
        vector<vector<int>> nextvals;
        string mainstr = "";
        int cnt = 0;
        for(string word:words){
            indexes[cnt] = mainstr.size();
            mainstr += word;
            mainstr += ",";
            cnt++;
        }
        for(int i=0;i<n;i++){
            vector<int> nextval(words[i].size(),0);
            get_nextval(words[i],nextval);
            nextvals.push_back(nextval);
        }
        
        for(int i=0;i<n;i++){
            if(compare(mainstr,words[i],nextvals[i],indexes[i])>-1){
                ans.push_back(words[i]);
            }
        }
        return ans;
    }
};