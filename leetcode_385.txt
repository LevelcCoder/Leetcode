//一开始用了dfs但是自己不清楚逻辑，写的乱七八糟，贴官方的题//解效率也很低，然后照着官方的题解复现了栈，只能说记得一个//nest里可能有好几个nest。
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Constructor initializes an empty nested list.
 *     NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     NestedInteger(int value);
 *
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Set this NestedInteger to hold a single integer.
 *     void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     void add(const NestedInteger &ni);
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    NestedInteger deserialize(string s) {
        if(s[0]!='[') {
            string Num = "";
            int i=0;
            while(((s[i]<='9'&&s[i]>='0')||s[i]=='-')&&i<s.size()){
                Num+=s[i];
                i++;
            }
            return NestedInteger(stoi(Num));
        }
        stack<NestedInteger> stk;
        NestedInteger ans;
        string num = "";
        stk.push(ans);
        for(int i=1;i<s.size();i++){
            if((s[i]<='9'&&s[i]>='0')||s[i]=='-'){
                num+=s[i];
            }
            else if(s[i]=='['){
               
                NestedInteger another;
                stk.push(another);
            }
            else{
                if(num.size()>0){
                   stk.top().add(NestedInteger(stoi(num))); 
                }
                
                num = "";
            }
           //必须在这里pop并add到上一个nest里去
            if(s[i]==']'&&stk.size()>1){
             NestedInteger ni = stk.top();
              stk.pop();
              stk.top().add(ni);  
              
            }
            
        }
        
        return stk.top();
    }
};