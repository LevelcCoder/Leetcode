//16%
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        
        int n = piles.size();
        sort(piles.begin(),piles.end());
        if(h==n) return piles[n-1];
        long long k = piles[n-1];

        long long left = 1;
        long long right = piles[n-1];
        while(left<right){
            long long mid = (left+right)>>1;
            int time = 0;
            for(int i=0;i<n;i++){
                time += piles[i]/mid;
                if(piles[i]%mid) time++;
            }
            if(time==h){
                k = min(k,mid);
                right = mid;
            }
            else if(time>h){
                left = mid+1;
            }
            else{
                k = min(k,mid);
                right = mid;
            }
            
        }
      
        return k;
    }
};
//80%
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1;
        int high = 0;
        for (int pile : piles) {
            high = max(high, pile);
        }
        int k = high;
        while (low < high) {
            int speed = (high - low) / 2 + low;
            long time = getTime(piles, speed);
            if (time <= h) {
                k = speed;
                high = speed;
            } else {
                low = speed + 1;
            }
        }
        return k;
    }

    long getTime(const vector<int>& piles, int speed) {
        long time = 0;
        for (int pile : piles) {
            int curTime = (pile + speed - 1) / speed;
            time += curTime;
        }
        return time;
    }
};

