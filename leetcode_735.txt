//stack
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        stack<int> crash;
        crash.push(asteroids[0]);
        for(int i=1;i<asteroids.size();i++){
            if(asteroids[i]>0) crash.push(asteroids[i]);
            else{
                
                while(!crash.empty()&&crash.top()>0&&abs(asteroids[i])>crash.top()){
                    crash.pop();
                }
                if(crash.empty()) crash.push(asteroids[i]);
                else if(crash.top()<0) crash.push(asteroids[i]);
                else if(crash.top()==abs(asteroids[i])) crash.pop();
            }
        }
        int len = crash.size();
        vector<int> ans(len,0);
        for(int i=len-1;i>-1;i--){
            
            ans[i] = crash.top();
            crash.pop();
            
            
        }
        return ans;
    }
};
//space complexivity down
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        vector<int> st;
        for (auto aster : asteroids) {
            bool alive = true;
            while (alive && aster < 0 && !st.empty() && st.back() > 0) {
                alive = st.back() < -aster; // aster 是否存在
                if (st.back() <= -aster) {  // 栈顶行星爆炸
                    st.pop_back();
                }
            }
            if (alive) {
                st.push_back(aster);
            }
        }
        return st;
    }
};

