//动态规划+哈希表
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int ans = 1;
        int n = s.size();
        if(n==0) return 0;
        unordered_map<char,int> mp;
        vector<int> res(n,0);
        res[0] = 1;
        mp[s[0]] = 0;
        for(int i=1;i<n;i++){
            res[i] = res[i-1]+1;
            if(mp.find(s[i])!=mp.end()){
                int pos = mp[s[i]];
                res[i] = min(res[i],i-pos);
            }
            //cout<<res[i]<<endl;
            ans = max(res[i],ans);
            mp[s[i]] = i;
        }
        return ans;
    }
};

//集合+滑动窗口
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        // 哈希集合，记录每个字符是否出现过
        unordered_set<char> occ;
        int n = s.size();
        // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
        int rk = -1, ans = 0;
        // 枚举左指针的位置，初始值隐性地表示为 -1
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                // 左指针向右移动一格，移除一个字符
                occ.erase(s[i - 1]);
            }
            while (rk + 1 < n && !occ.count(s[rk + 1])) {//使用while来进行滑动!!!!!!!!
                // 不断地移动右指针
                occ.insert(s[rk + 1]);
                ++rk;
            }
            // 第 i 到 rk 个字符是一个极长的无重复字符子串
            ans = max(ans, rk - i + 1);
        }
        return ans;
    }
};

