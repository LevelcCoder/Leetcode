class MyCircularQueue {
public:
    vector<int> Queue;
    int maxsize = 0;
    int front = 0;
    int rear = 0;
    MyCircularQueue(int k) {
        Queue.resize(k+1);
        maxsize = k+1;//实现大小为k的满队列
    }
    
    bool enQueue(int value) {
        if(this->isFull()) return false;
        Queue[rear] = value;
        rear = (rear+1)%maxsize;
        return true;
    }
    
    bool deQueue() {
        if(this->isEmpty()) return false;
        front = (front+1)%maxsize;
        return true;
    }
    
    int Front() {
        if(this->isEmpty()) return -1;
        return Queue[front];
    }
    
    int Rear() {
        if(this->isEmpty()) return -1;
        return Queue[(rear-1+maxsize)%maxsize];
    }
    
    bool isEmpty() {
        return rear==front;
    }
    
    bool isFull() {
        
        return (rear+1)%maxsize==front;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */