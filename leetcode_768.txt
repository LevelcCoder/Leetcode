//攻克，但是5%
class Rec{
public:
    int pos;
    int val;
};

class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        int ans = 0;
        int n = arr.size();
        vector<int> cnts(n,0);
        vector<Rec> temp(n);
        for(int i=0;i<n;i++){
            temp[i].val = arr[i];
            temp[i].pos = i;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n-i-1;j++){
                if(temp[j+1].val<temp[j].val){
                    Rec t = temp[j];
                    temp[j] = temp[j+1];
                    temp[j+1] = t;
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<=i;j++){
                if(temp[j].pos<=i) cnts[i]++;
            }
            if(cnts[i]==i+1) ans++;
        }
        return ans;
    }
};
//单调栈
class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        stack<int> st;
        for (auto &num : arr) {
            if (st.empty() || num >= st.top()) {
                st.emplace(num);
            } else {
                int mx = st.top();
                st.pop();
                while (!st.empty() && st.top() > num) {
                    st.pop();
                }
                st.emplace(mx);
            }
        }
        return st.size();
    }
};

