/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height = 0;
    vector<vector<string>> printTree(TreeNode* root) {
        height = dfs(root);
        int m = height;
        int n = pow(2,height) - 1;
        
        vector<vector<string>> res(m,vector<string>(n,""));
        rec_dfs(res,root,0,(n-1)/2);
        return res;
    }
    int dfs(TreeNode* root){
        if(root==NULL) return 0;
        return max(dfs(root->left),dfs(root->right))+1;
    }

    void rec_dfs(vector<vector<string>> &rec,TreeNode* root,int row,int col){
        if(root==NULL) return ;
        rec[row][col] = to_string(root->val);
        rec_dfs(rec,root->left,row+1,col-pow(2,height-row-2));
        rec_dfs(rec,root->right,row+1,col+pow(2,height-row-2));
    }
};

//改进了pow函数
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height = 0;
    vector<vector<string>> printTree(TreeNode* root) {
        height = dfs(root);
        int m = height;
        int n = (1 << height ) - 1;
        
        vector<vector<string>> res(m,vector<string>(n,""));
        height--;
        rec_dfs(res,root,0,(n-1)/2);
        return res;
    }
    int dfs(TreeNode* root){
        if(root==NULL) return 0;
        return max(dfs(root->left),dfs(root->right))+1;
    }

    void rec_dfs(vector<vector<string>> &rec,TreeNode* root,int row,int col){
        if(root==NULL) return ;
        rec[row][col] = to_string(root->val);
        if(root->left!=NULL)
        rec_dfs(rec,root->left,row+1,col - (1 << (height - row - 1)) ); 
        if(root->right!=NULL)
        rec_dfs(rec,root->right,row+1,col + (1 << (height - row - 1)));
    }
};