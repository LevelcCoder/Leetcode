//BFS 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        TreeNode* ans = root;
        queue <TreeNode*> bfs;
        bfs.push(root);
        int player_cnt = 1;
        int clayer_cnt = 0;
        while(!bfs.empty()){
            
            TreeNode *Root = bfs.front();
            bfs.pop();
            player_cnt--;
            if(Root->left!=NULL){
               bfs.push(Root->left); 
               if(clayer_cnt==0) ans = Root->left;
               clayer_cnt++;
            }
            if(Root->right!=NULL){
                bfs.push(Root->right);
                if(clayer_cnt==0) ans = Root->right;
                clayer_cnt++;
            }
            if(player_cnt==0){
                player_cnt = clayer_cnt;
                clayer_cnt = 0;
            }
        }
        return ans->val;
    }
};
//官方题解 从右到左遍历
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int ret;
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            if (p->right) {
                q.push(p->right);
            }
            if (p->left) {
                q.push(p->left);
            }
            ret = p->val;
        }
        return ret;
    }
};

